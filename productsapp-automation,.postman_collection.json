{
	"info": {
		"_postman_id": "830fb5bb-17e6-46d8-bb08-93a1dece325c",
		"name": "productsapp-automation,",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6f4b831-ce05-4a71-a750-265984394e70",
						"exec": [
							"var jsonData =  JSON.parse(responseBody);\r",
							"\r",
							"// 4 tests for testing structure of first object returned \r",
							"pm.test(\"response to have an Id\", function (){\r",
							"    pm.response.to.have.jsonBody(\"[0].Id\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Name\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Name\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Category\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    pm.response.to.have.jsonBody(\"[0].Price\");\r",
							"});\r",
							"\r",
							"// 4 tests testing data of the first object returned\r",
							"pm.test(\"value of [0].Id to be 1\", function(){\r",
							"    pm.expect(1).to.equal(jsonData[0].Id);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [0].Name to be Chicken Soup\", function(){\r",
							"    pm.expect(\"Chicken Soup\").to.equal(jsonData[0].Name);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [0].Category to be Soup\", function(){\r",
							"    pm.expect(\"Soup\").to.equal(jsonData[0].Category);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [0].Price to be 13\", function(){\r",
							"    pm.expect(13).to.equal(jsonData[0].Price);\r",
							"});\r",
							"\r",
							"// 4 tests testing data of the second object returned\r",
							"pm.test(\"value of [1].Id to be 2\", function(){\r",
							"    pm.expect(2).to.equal(jsonData[1].Id);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [1].Name to be Yo-yo\", function(){\r",
							"    pm.expect(\"Yo-yo\").to.equal(jsonData[1].Name);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [1].Category to be Toys\", function(){\r",
							"    pm.expect(\"Toys\").to.equal(jsonData[1].Category);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [1].Price to be 3.75\", function(){\r",
							"    pm.expect(3.75).to.equal(jsonData[1].Price);\r",
							"});\r",
							"\r",
							"// 4 tests testing data of third object returned \r",
							"pm.test(\"value of [2].Id to be 3\", function(){\r",
							"    pm.expect(3).to.equal(jsonData[2].Id);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [2].Name to be Hammer\", function(){\r",
							"    pm.expect(\"Hammer\").to.equal(jsonData[2].Name);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [2].Category to be Hardware\", function(){\r",
							"    pm.expect(\"Hardware\").to.equal(jsonData[2].Category);\r",
							"});\r",
							"\r",
							"pm.test(\"value of [2].Price to be 16.99\", function(){\r",
							"    pm.expect(16.99).to.equal(jsonData[2].Price);\r",
							"});\r",
							"\r",
							"// testing response\r",
							"pm.test(\"response to be 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"response time less than 1000MS\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);  // less than 1 sec\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50673/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50673",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7996866-3dbb-44b5-b1ab-908f2f1e718d",
						"exec": [
							"var jsonData =  JSON.parse(responseBody);  // this time jsonData is just one object\r",
							"\r",
							"// 4 tests for testing structure of object returned (third object) \r",
							"pm.test(\"response to have an Id\", function (){\r",
							"    pm.response.to.have.jsonBody(\"Id\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Name\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Name\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Category\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Category\");\r",
							"});\r",
							"\r",
							"pm.test(\"response to have a Price\", function(){\r",
							"    pm.response.to.have.jsonBody(\"Price\");\r",
							"});\r",
							"\r",
							"// 4 tests testing data of object returned (third object) \r",
							"pm.test(\"value of Id to be 3\", function(){\r",
							"    pm.expect(3).to.equal(jsonData.Id);\r",
							"});\r",
							"\r",
							"pm.test(\"value of Name to be Hammer\", function(){\r",
							"    pm.expect(\"Hammer\").to.equal(jsonData.Name);\r",
							"});\r",
							"\r",
							"pm.test(\"value of Category to be Hardware\", function(){\r",
							"    pm.expect(\"Hardware\").to.equal(jsonData.Category);\r",
							"});\r",
							"\r",
							"pm.test(\"value of Price to be 16.99\", function(){\r",
							"    pm.expect(16.99).to.equal(jsonData.Price);\r",
							"});\r",
							"\r",
							"// testing response\r",
							"pm.test(\"response to be 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"response time less than 1000MS\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);  // less than 1 sec\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:50673/api/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "50673",
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}